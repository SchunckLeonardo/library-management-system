// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	entity "github.com/SchunckLeonardo/library-management-system/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// PatronRepositoryInterface is an autogenerated mock type for the PatronRepositoryInterface type
type PatronRepositoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: patron
func (_m *PatronRepositoryInterface) Create(patron entity.Patron) error {
	ret := _m.Called(patron)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Patron) error); ok {
		r0 = rf(patron)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *PatronRepositoryInterface) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: patron
func (_m *PatronRepositoryInterface) Update(patron entity.Patron) error {
	ret := _m.Called(patron)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Patron) error); ok {
		r0 = rf(patron)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPatronRepositoryInterface creates a new instance of PatronRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPatronRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PatronRepositoryInterface {
	mock := &PatronRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
